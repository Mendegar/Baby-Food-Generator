import { useState, useEffect } from 'react'
import { SecurityManager } from '../utils/security'

function SecurityScreen({ onAuthenticated, onSetupComplete }) {
  const [mode, setMode] = useState('check') // check, setup, login, change
  const [pin, setPin] = useState('')
  const [confirmPin, setConfirmPin] = useState('')
  const [oldPin, setOldPin] = useState('')
  const [error, setError] = useState('')
  const [loading, setLoading] = useState(false)
  const [securityStatus, setSecurityStatus] = useState(null)

  useEffect(() => {
    checkSecurityStatus()
    
    // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å–µ—Å—Å–∏—è–º–∏
    SecurityManager.setupSessionManagement()
    
    // –°–ª—É—à–∞—Ç–µ–ª—å –∏—Å—Ç–µ—á–µ–Ω–∏—è —Å–µ—Å—Å–∏–∏
    const handleSessionExpired = () => {
      setMode('login')
      setError('–°–µ—Å—Å–∏—è –∏—Å—Ç–µ–∫–ª–∞. –í–≤–µ–¥–∏—Ç–µ PIN-–∫–æ–¥ –ø–æ–≤—Ç–æ—Ä–Ω–æ.')
    }
    
    window.addEventListener('session-expired', handleSessionExpired)
    return () => window.removeEventListener('session-expired', handleSessionExpired)
  }, [])

  const checkSecurityStatus = () => {
    const status = SecurityManager.getSecurityStatus()
    setSecurityStatus(status)

    if (!status.hasPin) {
      setMode('setup')
    } else if (status.requiresAuth) {
      setMode('login')
    } else {
      onAuthenticated()
    }
  }

  const handleSetupPin = async () => {
    if (pin !== confirmPin) {
      setError('PIN-–∫–æ–¥—ã –Ω–µ —Å–æ–≤–ø–∞–¥–∞—é—Ç')
      return
    }

    if (pin.length < 4) {
      setError('PIN-–∫–æ–¥ –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å –º–∏–Ω–∏–º—É–º 4 —Å–∏–º–≤–æ–ª–∞')
      return
    }

    setLoading(true)
    try {
      await SecurityManager.setPinCode(pin)
      setPin('')
      setConfirmPin('')
      setError('')
      onSetupComplete()
      onAuthenticated()
    } catch (error) {
      setError(error.message)
    } finally {
      setLoading(false)
    }
  }

  const handleLogin = async () => {
    if (!pin) {
      setError('–í–≤–µ–¥–∏—Ç–µ PIN-–∫–æ–¥')
      return
    }

    setLoading(true)
    try {
      await SecurityManager.verifyPin(pin)
      setPin('')
      setError('')
      onAuthenticated()
    } catch (error) {
      setError(error.message)
      setPin('')
      // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏
      checkSecurityStatus()
    } finally {
      setLoading(false)
    }
  }

  const handleChangePin = async () => {
    if (!oldPin) {
      setError('–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—É—â–∏–π PIN-–∫–æ–¥')
      return
    }

    if (pin !== confirmPin) {
      setError('–ù–æ–≤—ã–µ PIN-–∫–æ–¥—ã –Ω–µ —Å–æ–≤–ø–∞–¥–∞—é—Ç')
      return
    }

    if (pin.length < 4) {
      setError('–ù–æ–≤—ã–π PIN-–∫–æ–¥ –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å –º–∏–Ω–∏–º—É–º 4 —Å–∏–º–≤–æ–ª–∞')
      return
    }

    setLoading(true)
    try {
      await SecurityManager.changePinCode(oldPin, pin)
      setOldPin('')
      setPin('')
      setConfirmPin('')
      setError('')
      setMode('login')
      alert('PIN-–∫–æ–¥ —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω—ë–Ω')
    } catch (error) {
      setError(error.message)
    } finally {
      setLoading(false)
    }
  }

  const handleResetSecurity = () => {
    if (window.confirm(
      '–í—ã –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ —Ö–æ—Ç–∏—Ç–µ —Å–±—Ä–æ—Å–∏—Ç—å —Å–∏—Å—Ç–µ–º—É –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏?\n\n' +
      '–≠—Ç–æ —É–¥–∞–ª–∏—Ç PIN-–∫–æ–¥ –∏ –æ—Ç–∫—Ä–æ–µ—Ç –¥–æ—Å—Ç—É–ø –∫–æ –≤—Å–µ–º –ø—Ä–æ—Ñ–∏–ª—è–º.\n' +
      '–î–∞–Ω–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–µ–ª—å–∑—è –æ—Ç–º–µ–Ω–∏—Ç—å.'
    )) {
      SecurityManager.resetSecurity()
      checkSecurityStatus()
    }
  }

  const formatTimeRemaining = (lockedUntil) => {
    const remaining = Math.ceil((new Date(lockedUntil) - new Date()) / 1000 / 60)
    return remaining > 0 ? remaining : 0
  }

  if (mode === 'setup') {
    return (
      <div className="card" style={{ maxWidth: '400px', margin: '2rem auto' }}>
        <h2>–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∑–∞—â–∏—Ç—ã</h2>
        
        <div className="warning">
          <strong>–†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å PIN-–∫–æ–¥</strong>
          –≠—Ç–æ –∑–∞—â–∏—Ç–∏—Ç –ª–∏—á–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –≤–∞—à–∏—Ö –¥–µ—Ç–µ–π –æ—Ç –ø–æ—Å—Ç–æ—Ä–æ–Ω–Ω–∏—Ö –ª–∏—Ü, 
          –∫–æ—Ç–æ—Ä—ã–µ –º–æ–≥—É—Ç –ø–æ–ª—É—á–∏—Ç—å –¥–æ—Å—Ç—É–ø –∫ –≤–∞—à–µ–º—É —É—Å—Ç—Ä–æ–π—Å—Ç–≤—É.
        </div>

        <div className="form-group">
          <label className="form-label">
            –°–æ–∑–¥–∞–π—Ç–µ PIN-–∫–æ–¥ (–º–∏–Ω–∏–º—É–º 4 —Å–∏–º–≤–æ–ª–∞):
            <input
              type="password"
              className="form-input"
              value={pin}
              onChange={(e) => setPin(e.target.value)}
              placeholder="–í–≤–µ–¥–∏—Ç–µ PIN-–∫–æ–¥"
              maxLength={20}
            />
          </label>
        </div>

        <div className="form-group">
          <label className="form-label">
            –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ PIN-–∫–æ–¥:
            <input
              type="password"
              className="form-input"
              value={confirmPin}
              onChange={(e) => setConfirmPin(e.target.value)}
              placeholder="–ü–æ–≤—Ç–æ—Ä–∏—Ç–µ PIN-–∫–æ–¥"
              maxLength={20}
            />
          </label>
        </div>

        {error && (
          <div className="warning">
            {error}
          </div>
        )}

        <div className="btn-group">
          <button 
            className="btn"
            onClick={handleSetupPin}
            disabled={loading || !pin || !confirmPin}
          >
            {loading ? '–ù–∞—Å—Ç—Ä–æ–π–∫–∞...' : '–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å PIN-–∫–æ–¥'}
          </button>
          
          <button 
            className="btn btn-secondary"
            onClick={() => {
              onSetupComplete()
              onAuthenticated()
            }}
          >
            –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å (–Ω–µ —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è)
          </button>
        </div>

        <div style={{ 
          marginTop: '1.5rem', 
          padding: '1rem', 
          background: 'var(--surface)', 
          borderRadius: 'var(--radius)',
          fontSize: '0.9rem'
        }}>
          <strong>–í–∞–∂–Ω–æ:</strong>
          <ul style={{ margin: '0.5rem 0', paddingLeft: '1.2rem' }}>
            <li>–ó–∞–ø–æ–º–Ω–∏—Ç–µ PIN-–∫–æ–¥ - –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –Ω–µ–≤–æ–∑–º–æ–∂–Ω–æ</li>
            <li>PIN-–∫–æ–¥ –∑–∞—â–∏—â–∞–µ—Ç –¥–æ—Å—Ç—É–ø —Ç–æ–ª—å–∫–æ –≤ —ç—Ç–æ–º –±—Ä–∞—É–∑–µ—Ä–µ</li>
            <li>–ü—Ä–∏ –ø–æ—Ç–µ—Ä–µ PIN-–∫–æ–¥–∞ –ø–æ—Ç—Ä–µ–±—É–µ—Ç—Å—è –ø–æ–ª–Ω—ã–π —Å–±—Ä–æ—Å –¥–∞–Ω–Ω—ã—Ö</li>
          </ul>
        </div>
      </div>
    )
  }

  if (mode === 'login') {
    const isLocked = securityStatus?.isLocked
    const timeRemaining = isLocked ? formatTimeRemaining(securityStatus.lockedUntil) : 0

    return (
      <div className="card" style={{ maxWidth: '400px', margin: '2rem auto' }}>
        <h2>–í—Ö–æ–¥ –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ</h2>
        
        <div style={{ textAlign: 'center', marginBottom: '1.5rem' }}>
          <div style={{ 
            fontSize: '3rem', 
            marginBottom: '1rem',
            color: isLocked ? 'var(--error-color)' : 'var(--primary-color)'
          }}>
            {isLocked ? 'üîí' : 'üîê'}
          </div>
          <p>–í–≤–µ–¥–∏—Ç–µ PIN-–∫–æ–¥ –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ –ø—Ä–æ—Ñ–∏–ª—è–º</p>
        </div>

        {isLocked ? (
          <div className="warning">
            <strong>–î–æ—Å—Ç—É–ø –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω</strong>
            –°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –Ω–µ–≤–µ—Ä–Ω—ã—Ö –ø–æ–ø—ã—Ç–æ–∫. 
            –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —á–µ—Ä–µ–∑ {timeRemaining} –º–∏–Ω.
          </div>
        ) : (
          <>
            <div className="form-group">
              <label className="form-label">
                PIN-–∫–æ–¥:
                <input
                  type="password"
                  className="form-input"
                  value={pin}
                  onChange={(e) => setPin(e.target.value)}
                  placeholder="–í–≤–µ–¥–∏—Ç–µ PIN-–∫–æ–¥"
                  maxLength={20}
                  autoFocus
                  onKeyPress={(e) => {
                    if (e.key === 'Enter') {
                      handleLogin()
                    }
                  }}
                />
              </label>
            </div>

            {error && (
              <div className="warning">
                {error}
              </div>
            )}

            <div className="btn-group">
              <button 
                className="btn"
                onClick={handleLogin}
                disabled={loading || !pin}
              >
                {loading ? '–ü—Ä–æ–≤–µ—Ä–∫–∞...' : '–í–æ–π—Ç–∏'}
              </button>
            </div>
          </>
        )}

        <div style={{ marginTop: '2rem', textAlign: 'center' }}>
          <button 
            className="btn btn-secondary"
            style={{ fontSize: '0.9rem', padding: '0.5rem 1rem' }}
            onClick={() => setMode('change')}
            disabled={isLocked}
          >
            –ò–∑–º–µ–Ω–∏—Ç—å PIN-–∫–æ–¥
          </button>
          
          <button 
            className="btn btn-warning"
            style={{ fontSize: '0.9rem', padding: '0.5rem 1rem', marginLeft: '0.5rem' }}
            onClick={handleResetSecurity}
          >
            –°–±—Ä–æ—Å–∏—Ç—å –∑–∞—â–∏—Ç—É
          </button>
        </div>
      </div>
    )
  }

  if (mode === 'change') {
    return (
      <div className="card" style={{ maxWidth: '400px', margin: '2rem auto' }}>
        <h2>–ò–∑–º–µ–Ω–µ–Ω–∏–µ PIN-–∫–æ–¥–∞</h2>
        
        <div className="form-group">
          <label className="form-label">
            –¢–µ–∫—É—â–∏–π PIN-–∫–æ–¥:
            <input
              type="password"
              className="form-input"
              value={oldPin}
              onChange={(e) => setOldPin(e.target.value)}
              placeholder="–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—É—â–∏–π PIN-–∫–æ–¥"
              maxLength={20}
            />
          </label>
        </div>

        <div className="form-group">
          <label className="form-label">
            –ù–æ–≤—ã–π PIN-–∫–æ–¥:
            <input
              type="password"
              className="form-input"
              value={pin}
              onChange={(e) => setPin(e.target.value)}
              placeholder="–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π PIN-–∫–æ–¥"
              maxLength={20}
            />
          </label>
        </div>

        <div className="form-group">
          <label className="form-label">
            –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –Ω–æ–≤—ã–π PIN-–∫–æ–¥:
            <input
              type="password"
              className="form-input"
              value={confirmPin}
              onChange={(e) => setConfirmPin(e.target.value)}
              placeholder="–ü–æ–≤—Ç–æ—Ä–∏—Ç–µ –Ω–æ–≤—ã–π PIN-–∫–æ–¥"
              maxLength={20}
            />
          </label>
        </div>

        {error && (
          <div className="warning">
            {error}
          </div>
        )}

        <div className="btn-group">
          <button 
            className="btn"
            onClick={handleChangePin}
            disabled={loading || !oldPin || !pin || !confirmPin}
          >
            {loading ? '–ò–∑–º–µ–Ω–µ–Ω–∏–µ...' : '–ò–∑–º–µ–Ω–∏—Ç—å PIN-–∫–æ–¥'}
          </button>
          
          <button 
            className="btn btn-secondary"
            onClick={() => setMode('login')}
          >
            –û—Ç–º–µ–Ω–∞
          </button>
        </div>
      </div>
    )
  }

  return null
}

export default SecurityScreen
